Kubernates - 
-------------------------------------------------

###harerchie =>
image > container > pod > worker node(server)

###Kubelet - is responsible to run pod and container in side pod

### Kubernates cluster is made by multiple nodes


Kubernates cluster contains two type of node . 1.Master node 2. Worker node

1.Master node => containes below section

	a. API server - 
	b.Scheduler -> decides on which worker node new pod should created , memory management etc
	c.controller manager -> detect cluster state changes (eg. pod died), and call scheduler to restart or recreate the pod in some of the node
	d.etcd -> cluster brain, stored pods info in key value pair (cluster metadata)
	
	Master nodes requires less resourses
	
	
2. Worker Node - requires more resourses
				It container kubelets and containers (eg. docker container)
				
				
Minicube- creates vertual box on your laptop. server nodes run in that vertual box

kubectl- commmand line tool for kubernetes


Kubernates Cluster types - 
--------------------------
Minicube cluster
Cloud cluster



Minikube=> local kubernetes cluster

CMD -> minikube start --vm-driver=hyperkit    ->creates and start kubernetes cluster on local     

Deployement is blue print of Pod. usually we create deployment not pod. structure =>[Deployment ->replicas -> Pod]

CMDs
-------------------
kubectl get nodes
kubectl get pods
kubectl get pod -o wide (all info about pod)
kubectl get services
kubectl describe service mongodb-service (all info about service)
kubectl create deployment nginx-deplymt --image=nginx   (create deployment creates virtual file for deployment configuration)
kubectl edit deployment nginx-deplymt

kubectl logs [podname]
kubectl describe pod [podname]

kubectl exec -it [podname] -- bin/bash   (1.This command is usefull to interact with container application terminal 2.here we can see application logs, 3. '-it' stands for interactive terminal  )

****basic example of deployment file*****
-----------------------------------

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.14.2
        ports:
        - containerPort: 80
------------------------------------------
****Create & apply deployment file*****
-----------------------------------
step 1.  touch nginx-deployment.yaml. (create yaml file)
step 2.  vim nginx-deployment.yaml.  (insert content in yaml file) -> :wq - to save file
step 3.  kubectl apply -f nginx-deployment.yaml (apply changes of deployment)

------------------------------------------

CMD=> echo -n 'username' | base64 (Convert text to base 64) 

